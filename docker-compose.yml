version: "3.11"

services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "8080:8080"
    volumes:
      - "./frontend/src:/frontend/src"
      - "./frontend/public:/frontend/public"
      - "/src/node_modules"
    environment:
      - VUE_APP_BASE_API_URL=http://0.0.0.0:8000/
      - VUE_APP_BASE_WS_URL=ws://0.0.0.0:8888/
    depends_on:
      - api
  api:
    build:
      # path to directory containing Dockerfile
      context: ./api
      args:
        # set DEV argument to true
        - DEV=true
    # map local port 8000 to port 8000 in container
    ports:
      - "8000:8000"
    # map directory from system to docker container
    volumes:
      - "./api/src:/src"
    # commands run from container
    command: >
      sh -c "
              python manage.py wait_for_db &&
              python manage.py migrate &&
              python manage.py runserver 0.0.0.0:8000
      "
    # uncomment this if you don't want to define .env file
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=devpass
      - DATABASE_PORT=5432
      # redis env variables
      - REDIS_HOST=redis_db
      - REDIS_PORT=6379
      - REDIS_PASS=dev_redispass
      # celery env variables
      - CELERY_BROKER_URL=redis://:dev_redispass@redis_db:6379
      - CELERY_RESULT_BACKEND=redis://:dev_redispass@redis_db:6379
      # email settings
      - EMAIL_HOST_USER=YOUR_HOST
      - EMAIL_HOST_PASSWORD=YOUR_PWD
      # project settings
      - BASE_URL=http://localhost:8000/
      - BASE_FRONTEND_URL="http://localhost:8080/"
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,0.0.0.0,127.0.0.1,api
      - SECRET_KEY=YOUR_SECRET_KEY
      - CORS_ORIGIN_WHITELIST=http://localhost:8000,http://localhost:8080,http://0.0.0.0:8000,http://0.0.0.0:8080,http://localhost:8888,http://0.0.0.0:8888
      - CORS_ALLOWED_ORIGINS=http://localhost:8000,http://localhost:8080,http://0.0.0.0:8000,http://0.0.0.0:8080,http://localhost:8888,http://0.0.0.0:8888
      - CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://localhost:8080,http://0.0.0.0:8000,http://0.0.0.0:8080,http://localhost:8888,http://0.0.0.0:8888
      - CODESPACE_REDIS_EXPIRE_TIME=1200
      - TMP_CODESPACE_REDIS_EXPIRE_TIME=1200

    # wait till db service start
    depends_on:
      - db
      - redis_db
  # celery worker will execute async to take load from python api
  celery_worker:
    restart: always
    build:
      context: ./api
      args:
        # set DEV argument to true
        - DEV=true
    # map directory from system to docker container
    volumes:
      - "./api/src:/src"
    command: celery -A src worker -l INFO
    # uncomment this if you don't want to define .env file
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=devpass
      - DATABASE_PORT=5432
      # redis env variables
      - REDIS_HOST=redis_db
      - REDIS_PORT=6379
      - REDIS_PASS=dev_redispass
      # celery env variables
      - CELERY_BROKER_URL=redis://:dev_redispass@redis_db:6379
      - CELERY_RESULT_BACKEND=redis://:dev_redispass@redis_db:6379
      # email settings
      - EMAIL_HOST_USER=YOUR_HOST
      - EMAIL_HOST_PASSWORD=YOUR_PWD
      # project settings
      - BASE_URL=http://localhost:8000/
      - BASE_FRONTEND_URL="http://localhost:8080/"
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,0.0.0.0,127.0.0.1,api
      - SECRET_KEY=YOUR_SECRET_KEY
      - CORS_ORIGIN_WHITELIST=http://localhost:8000,http://localhost:8080,http://0.0.0.0:8000,http://0.0.0.0:8080,http://localhost:8888,http://0.0.0.0:8888
      - CORS_ALLOWED_ORIGINS=http://localhost:8000,http://localhost:8080,http://0.0.0.0:8000,http://0.0.0.0:8080,http://localhost:8888,http://0.0.0.0:8888
      - CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://localhost:8080,http://0.0.0.0:8000,http://0.0.0.0:8080,http://localhost:8888,http://0.0.0.0:8888
      - CODESPACE_REDIS_EXPIRE_TIME=1200
      - TMP_CODESPACE_REDIS_EXPIRE_TIME=1200
    depends_on:
      - db
      - redis_db
      - api
  websocket_server:
    build:
      # path to directory containing Dockerfile
      context: ./websocket_server
      args:
        # set DEV argument to true
        - DEV=true
    # map directory from system to docker container
    volumes:
      - "./websocket_server/src:/src"
    # commands run from container
    command: watchmedo auto-restart --pattern "*.py" --recursive --signal SIGTERM -- sanic main.app --host 0.0.0.0 --port 8888
    # define environmental variables
    environment:
      # define port without exposing it. Only haproxy should have direct access to it
      - PORT=8888
      - API_BASE_URL=http://api:8000/
      # redis env variables
      - REDIS_HOST=redis_db
      - REDIS_PORT=6379
      - REDIS_PASS=dev_redispass
      - TMP_CODESPACE_EXPIRE_UPDATE=1200
      - CODESPACE_EXPIRE_UPDATE=1200
    depends_on:
      - api
  loadbalancer:
    image: haproxy:1.8
    restart: always
    ports:
      - "8888:8888"
    volumes:
      - "./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"
    depends_on:
      - websocket_server
    links:
      - websocket_server
    deploy:
      resources:
        # set memory limit
        limits:
          memory: 500M
  db:
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    volumes:
      - dev-db-data:/var/lib/postgres/data
    # initial environment variables
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass
  redis_db:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass dev_redispass --notify-keyspace-events Kx

volumes:
  dev-db-data:
    driver: local
